// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: user.sql

package db

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :execlastid
# name: CreateUser :execlastid
INSERT INTO user (username, password)
VALUES (?, ?)
`

type CreateUserParams struct {
	Username string
	Password string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, createUser, arg.Username, arg.Password)
	if err != nil {
		return 0, err
	}
	return result.LastInsertId()
}

const getUser = `-- name: GetUser :one
# name: GetUser :one
SELECT id, username, password, refresh_token FROM user
WHERE id = ? LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.RefreshToken,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
# name: GetUserByID :one
SELECT id, username, password, refresh_token FROM user
WHERE id = ? LIMIT 1
`

func (q *Queries) GetUserByID(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.RefreshToken,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
# name: GetUserByUsername :one
SELECT id, username, password, refresh_token FROM user
WHERE username = ? LIMIT 1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.RefreshToken,
	)
	return i, err
}

const setUserRefreshToken = `-- name: SetUserRefreshToken :exec
# name: SetUserRefreshToken :exec
UPDATE user SET refresh_token = ?
WHERE id = ?
`

type SetUserRefreshTokenParams struct {
	RefreshToken sql.NullString
	ID           int32
}

func (q *Queries) SetUserRefreshToken(ctx context.Context, arg SetUserRefreshTokenParams) error {
	_, err := q.db.ExecContext(ctx, setUserRefreshToken, arg.RefreshToken, arg.ID)
	return err
}
